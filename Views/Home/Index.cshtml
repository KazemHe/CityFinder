@model PagedList.IPagedList<CityFinder.Models.City>
@using PagedList.Mvc;

@{
    ViewBag.Title = "Home Page";
}

<section class="title-section">
<h2 class="home-page-title">ישובים</h2>
<h2 class="home-page-title">ממשק אדמין</h2>
    <h2></h2>
</section>


<script src="~/Scripts/jquery-3.3.1.min.js"></script>
<script>
    var charMapping = {
        'a': 'ש', 'b': 'נ', 'c': 'ב', 'd': 'ג', 'e': 'ק', 'f': 'כ', 'g': 'ע', 'h': 'י', 'i': 'ן',
        'j': 'ח', 'k': 'ל', 'l': 'ך', 'm': 'צ', 'n': 'מ', 'o': 'ם', 'p': 'פ', 'q': '/', 'r': 'ר',
        's': 'ד', 't': 'א', 'u': 'ו', 'v': 'ה', 'w': '\'', 'x': 'ס', 'y': 'ט', 'z': 'צ', ',': 'ת', ';': 'ף'
    };

    function convertToHebrew(input) {
        return input.split('').map(function(char) {
            return charMapping[char.toLowerCase()] || char; // Convert if mapping exists, else keep original
        }).join('');
    }

    function searchCities() {
        var searchValue = $('#SearchString').val();

        // Check if input is likely in English but meant to be Hebrew and convert
        if (isEnglishInputButMeantHebrew(searchValue)) {
            searchValue = convertToHebrew(searchValue);
        }

        // Existing AJAX call
        $.ajax({
            url: '@Url.Action("Index", "Cities")', // Ensure this is the correct URL
            type: 'GET',
            data: { searchString: searchValue },
            success: function (result) {
                // Replace the table with the new filtered results
                $('#citiesTable').html($(result).find('#citiesTable'));
            }
        });
    }

    function isEnglishInputButMeantHebrew(input) {
        // Basic heuristic: if more than half of the characters are in the mapping, assume it's meant to be Hebrew
        var englishCharCount = input.split('').filter(char => charMapping[char.toLowerCase()]).length;
        return englishCharCount > input.length / 2;
    }
</script>





<div class="table-header">
    <section>
        @Html.ActionLink("ישוב", "Index", new { sortOrder = ViewBag.NameSortParm } , new {@class="sort" })
        @if (ViewBag.NameSortParm == "")
            {
        <span class="sort-indicator">&#9660;</span>  <!-- Ascending -->
            }
            else
            {
        <span class="sort-indicator">&#9650;</span>  <!-- Descending -->
            }
    </section>
    <section>

        <a href="@Url.Action("Create", "Cities")">
            <i class="fa-duotone fa-plus add-btn"></i>
        </a>
    </section>
</div>

@using (Html.BeginForm("Index", "Cities", FormMethod.Get, new { id = "searchForm" }))
{
<div class="search">
    @Html.TextBox("SearchString", ViewBag.CurrentFilter as string, new { @class = "form-control", onkeyup = "searchCities()" })
</div>
}



<table class="table table-striped table-hover" id="citiesTable">
    <tr>
    </tr>

    @foreach (var item in Model)
    {
    <tr>

        <td class="td-content">

            <div class="item-name">

                @Html.DisplayFor(modelItem => item.Name)
            </div>
            <div class="td-icons">
                <!-- Edit button with Font Awesome icon -->
                <a href="@Url.Action("Edit", "Cities", new { id = item.Id })" class="btn edin-btn">
                    <i class="fa-solid fa-pen"></i>
                </a>

                <!-- Space or divider between buttons -->
                <!-- Delete button with Font Awesome icon -->
                <a href="@Url.Action("Delete", "Cities", new { id = item.Id })" class="btn delete-btn btn-danger">
                    <i class="fa-solid fa-trash"></i>
                </a>
            </div>
        </td>

    </tr>
    }
</table>
<div dir="ltr" class="pagination-container">
    <span>pages</span>
    @Html.PagedListPager(Model,
        page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }),
        new PagedListRenderOptions {
            UlElementClasses = new[] { "pagination", "ml-2" } // Add margin-left to the pagination
        })
    <span class="page-info">@Model.PageNumber of @Model.PageCount</span>
</div>
